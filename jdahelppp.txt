import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import time

# --- 1. Konfigur√°cia str√°nky ---
st.set_page_config(
    page_title='Advanced Tips App',
    layout='wide',
    initial_sidebar_state='expanded'
)

st.title("Advanced Tips Dashboard üçΩÔ∏è")
st.markdown("Aplik√°cia demon≈°truje pokroƒçil√© Streamlit koncepty na datasetu `tips`.")

# --- 2. Jednoduch√° uk√°≈æka bez session_state: resetuj√∫ci sa poƒç√≠tadlo ---
def simple_counter():
    count = 0
    if st.button('Klikni v1'):
        count += 1
    st.write('Poƒç√≠tadlo bez session_state:', count)

simple_counter()

# --- 3. Jednoduch√° uk√°≈æka session_state: poƒç√≠tadlo ---
if 'count' not in st.session_state:
    st.session_state.count = 0

if st.button('Klikni v2'):
    st.session_state.count += 1

st.write('Poƒç√≠tadlo s session_state:', st.session_state.count)

# --- 4. Naƒç√≠tanie d√°t ---
def load_tips():
    return sns.load_dataset('tips')

df = load_tips()

# --- 5. Pokroƒçil√° uk√°≈æka session_state: slider pre total_bill ---
if 'bill_range' not in st.session_state:
    st.session_state.bill_range = (
        float(df.total_bill.min()),
        float(df.total_bill.max())
    )

st.session_state.bill_range = st.slider(
    'Rozsah total_bill',
    min_value=float(df.total_bill.min()),
    max_value=float(df.total_bill.max()),
    value=st.session_state.bill_range,
    step=0.1,
    key='bill_slider'
)

# --- 6. Filter a layout ---
st.sidebar.header("Filter")
selected_days = st.sidebar.multiselect(
    'Vyber de≈à n√°v≈°tevy',
    options=df.day.unique(),
    default=list(df.day.unique()),
    key='day_select'
)

df_filtered = df[
    (df.total_bill.between(*st.session_state.bill_range)) &
    (df.day.isin(selected_days))
]

# --- 7. Vizualiz√°cie v dvoch stƒ∫pcoch ---
col1, col2 = st.columns(2)
with col1:
    st.subheader('Scatter: tip vs total_bill')
    fig1, ax1 = plt.subplots()
    ax1.scatter(df_filtered.total_bill, df_filtered.tip)
    ax1.set_xlabel('Total Bill')
    ax1.set_ylabel('Tip')
    st.pyplot(fig1)

with col2:
    st.subheader('Bar: priemern√Ω tip podƒæa d≈àa')
    df_bar = (
        df_filtered.groupby('day')['tip']
        .mean()
        .reset_index()
    )
    fig2, ax2 = plt.subplots()
    ax2.bar(df_bar.day, df_bar.tip)
    ax2.set_xlabel('Day')
    ax2.set_ylabel('Avg Tip')
    st.pyplot(fig2)

# --- 8. Container: simul√°cia postupu s progress bar ---
# Vytvor√≠me kontajner na text aj progress bar, ktor√Ω budeme aktualizova≈•
progress_container = st.container()
with progress_container:
    st.write('Sp√∫≈°≈•am v√Ωpoƒçty‚Ä¶')
    progress_text = st.empty()
    progress_bar = st.progress(0)

# Simul√°cia 3-krokov√©ho procesu
for i in range(3):
    time.sleep(1)
    # Aktualizujeme text a progress bar v tom istom kontajneri
    with progress_container:
        progress_text.write(f'Krok {i+1}/3 dokonƒçen√Ω')
        progress_bar.progress((i+1) / 3)

# --- 9. Pr√≠klad pou≈æitia container na skupinu komponentov ---
st.write('Uk√°≈æka kontajnera na skupinu prvkov:')
group_container = st.container()
with group_container:
    st.subheader('≈†tatistiky filtrovan√Ωch d√°t')
    col_a, col_b = st.columns(2)
    with col_a:
        st.metric('Max total_bill', f"{df_filtered.total_bill.max():.2f}")
        st.metric('Min total_bill', f"{df_filtered.total_bill.min():.2f}")
    with col_b:
        st.metric('Priemern√Ω tip', f"{df_filtered.tip.mean():.2f}")
        st.metric('Celkov√Ω poƒçet z√°znamov', f"{len(df_filtered)}")


# --- 10. Dynamick√© prid√°vanie bodov scatter pomocou placeholder (container) ---
st.write('Anim√°cia scatteru: postupn√© prid√°vanie bodov (container)')
# Vytvor√≠me container a v ≈àom placeholder
scatter_container = st.container()
scatter_placeholder = scatter_container.empty()

# Priprav√≠me graf len raz
fig_sc, ax_sc = plt.subplots()
ax_sc.set_xlim(df_filtered.total_bill.min(), df_filtered.total_bill.max())
ax_sc.set_ylim(df_filtered.tip.min(), df_filtered.tip.max())
ax_sc.set_xlabel('Total Bill')
ax_sc.set_ylabel('Tip')
ax_sc.set_title('Live scatter anim√°cia')

max_pts = min(50, len(df_filtered))
for i in range(max_pts):
    ax_sc.scatter(df_filtered.total_bill.iloc[i], df_filtered.tip.iloc[i])
    # Prepis grafu v placeholderi v r√°mci containeru
    scatter_placeholder.pyplot(fig_sc)
    time.sleep(0.1)


# --- 11. Stiahnutie filtrovan√Ωch d√°t ---
to_download = df_filtered.to_csv(index=False).encode('utf-8')
st.download_button(
    'Stiahnu≈• filtrovan√© d√°ta CSV',
    data=to_download,
    file_name='tips_filtered.csv',
    mime='text/csv'
)

# --- 12. Spustanie v DataLabe ---
# streamlit run app.py \
#     --browser.serverAddress 0.0.0.0 \
#     --server.enableCORS False
# Pr√≠stup: /proxy/8501/app

#########
#########
#########

1. Ciele predn√°≈°ky
Prehƒ∫bi≈• znalosti o state v Streamlitu: st.session_state pre trval√© ukladanie hodn√¥t.
Nauƒçi≈• sa pou≈æ√≠va≈• caching (@st.cache_data) pre zr√Ωchlenie naƒç√≠tania.
Uk√°za≈• dynamick√© stavy a anim√°cie pomocou st.container a st.empty.
Zoskupi≈• komponenty do logick√Ωch blokov a ovl√°da≈• ich aktualiz√°cie.
2. Architekt√∫ra a stav (state)
2.1 Script-run model
Po ka≈ædej interakcii (kliknut√≠, posunut√≠ slajdru) sa skript znovu spust√≠ od zaƒçiatku.
V≈°etky stateful widgety si uchov√°vaj√∫ svoju hodnotu medzi rerun-mi.
Na explicitn√© ukladanie premenn√Ωch medzi behmi sl√∫≈æi st.session_state.
2.2 Pr√°ca so st.session_state
Inicializ√°cia:
if 'count' not in st.session_state:
    st.session_state.count = 0
Aktualiz√°cia pri interakcii:
if st.button('Klikni v2'):
    st.session_state.count += 1
3. Rozlo≈æenie pomocou stƒ∫pcov (st.columns)
Rozdeƒæte obsah na viacero vertik√°lnych blokov:
col1, col2 = st.columns(2)
with col1:
    st.write('Prv√Ω stƒ∫pec')
with col2:
    st.write('Druh√Ω stƒ∫pec')
Pr√≠klad paraleln√Ωch grafov:
col1, col2 = st.columns(2)
with col1:
    st.pyplot(fig_scatter)
with col2:
    st.pyplot(fig_bar)
Metriky vedƒæa seba:
colA, colB = st.columns(2)
with colA:
    st.metric('Max total_bill', max_val)
    st.metric('Min total_bill', min_val)
with colB:
    st.metric('Avg tip', avg_tip)
    st.metric('Count', record_count)
4. Dynamick√© bloky pomocou st.container a st.empty
4.1 Container
Vytvor√≠ logick√Ω blok, ktor√Ω sa d√° naraz prep√≠sa≈• viacer√Ωmi widgetmi.
Simul√°cia v√Ωpoƒçtov:
progress_container = st.container()
with progress_container:
    st.write('Sp√∫≈°≈•am v√Ωpoƒçty‚Ä¶')
    progress_text = st.empty()
    progress_bar = st.progress(0)

for i in range(3):
    time.sleep(1)
    with progress_container:
        progress_text.write(f'Krok {i+1}/3 dokonƒçen√Ω')
        progress_bar.progress((i+1)/3)
4.2 Placeholder (st.empty)
Rezervuje presn√© miesto, ktor√© mo≈æno priebe≈æne aktualizova≈•.
Animovan√Ω scatter:
scatter_container = st.container()
scatter_placeholder = scatter_container.empty()

fig, ax = plt.subplots()
# nastav rozsahy os√≠...

for i in range(max_pts):
    ax.scatter(x[i], y[i])
    scatter_placeholder.pyplot(fig)
    time.sleep(0.1)
5. Layout a metriky
Pou≈æite st.container() + st.columns() na elegantn√© zobrazenie kƒæ√∫ƒçov√Ωch metr√≠k.
Zoskupovanie udr≈æ√≠ k√≥d prehƒæadn√Ω a umo≈æn√≠ jednoduch√∫ aktualiz√°ciu viacer√Ωch prvkov naraz.
