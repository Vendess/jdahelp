#intervaly
df['qcut_interval'] = pd.qcut(df['stlpec'], q=5)
df_all['alcohol_bin'] = pd.cut(df_all['alcohol'], bins=5)
#grp by
avg_quality_by_alcohol = df_all.groupby('alcohol_bin')['quality'].mean()

#graf line
avg_quality_by_alcohol.plot(kind='line', marker='o')
plt.title('Priemerná kvalita podľa úrovní alkoholu', fontsize=16)
plt.xlabel('Intervaly alkoholu')
plt.ylabel('Priemerná kvalita')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

#bar
df_all['pH_rounded'] = df_all['pH'].round(1)
mean_quality_by_pH = df_all.groupby('pH_rounded')['quality'].mean()
mean_quality_by_pH.plot(kind='bar', stacked=False, figsize=(12, 6), color=['green'])
plt.tight_layout()
plt.show()

#pocet
count_by_pH_high_quality = df_all.groupby(['pH_rounded', 'high_quality']).size().unstack(fill_value=0)
count_by_pH_high_quality.plot(kind='bar', stacked=True, figsize=(12, 6), color=['green', 'purple'])

#hist 2 next to
high_quality_wines = df_all[df_all['high_quality'] == 1]
low_quality_wines = df_all[df_all['high_quality'] == 0]

fig, axs = plt.subplots(1, 2, figsize=(14, 5), sharey=True)

axs[0].hist(high_quality_wines['alcohol'], bins=20, color='green', alpha=0.7)
axs[0].set_title('Distribúcia alkoholu - vysokokvalitné vína')
axs[0].set_xlabel('Alcohol')
axs[0].set_ylabel('Počet vín')

axs[1].hist(low_quality_wines['alcohol'], bins=20, color='red', alpha=0.7)
axs[1].set_title('Distribúcia alkoholu - ostatné vína')
axs[1].set_xlabel('Alcohol')

plt.tight_layout()
plt.show()

#joinplot
sns.jointplot(data=diamonds, x='price', y='carat', kind='scatter/hex', s=10, alpha=0.1)
plt.show()

#hist 2 in 1
high_quality = df_all[df_all['high_quality'] == 1]['alcohol']
low_quality = df_all[df_all['high_quality'] == 0]['alcohol']

plt.figure(figsize=(10,6))

plt.hist(low_quality, bins=30, alpha=0.5, label='Low quality', color='red', edgecolor='black')
plt.hist(high_quality, bins=30, alpha=0.5, label='High quality', color='green', edgecolor='black')

plt.xlabel('Alcohol')
plt.ylabel('Count')
plt.title('Distribution of Alcohol by Wine Quality')
plt.legend()
plt.show()

#scatter
plt.figure(figsize=(10, 6))
scatter = plt.scatter(
    df_all['volatile acidity'],
    df_all['citric acid'],
    c=df_all['alcohol'],
    alpha=0.7,
    edgecolor='k'
)
plt.colorbar(scatter, label='Alcohol')
plt.grid(True)

#pie
high_qual_counts = df_all['high_quality'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(high_qual_counts, labels=high_qual_counts.index, colors=['red', 'blue'], autopct='%1.1f%%')


###
#interakt
import pandas as pd
import matplotlib.pyplot as plt
import ipywidgets as widgets
from ipywidgets import interact, IntSlider, Dropdown
import plotly.express as px

df_red = pd.read_csv("winequality-red.csv", sep=';')
df_white = pd.read_csv("winequality-white.csv", sep=';')
wine_df = pd.concat([df_red, df_white], ignore_index=True)

#only numeric cols
numeric_cols = wine_df.select_dtypes(include='number').columns.tolist()

def interactive_histogram(variable='alcohol', bins=10):
    data = wine_df[variable]
    
    plt.figure(figsize=(8, 4))
    plt.hist(data, bins=bins, color='skyblue', edgecolor='black')
    plt.title(f'Histogram premennnej: {variable}')
    plt.xlabel(variable)
    plt.ylabel('Frekvencia')
    plt.grid(True)
    plt.show()

#widget
interact(
    interactive_histogram,
    variable=Dropdown(options=numeric_cols, value='alcohol', description='Premenná:'),
    bins=IntSlider(min=5, max=100, step=5, value=20, description='Počet binov:')
)
###


#sns load
diamonds = sns.load_dataset('diamonds')

#hist
sns.displot(
    diamonds['price'],
    kind='hist',
    bins=50,
    #bins='auto'
    kde=True,
    height=5,
    aspect=2.5,
    color='tomato'
)
plt.xticks(np.arange(0, 6, 0.5))
plt.xticks(rotation=45)
plt.show()

#scatter
plt.figure(figsize=(12, 8))
sns.scatterplot(
    data=diamonds,
    x='carat',
    y='price',
    alpha=0.5,
    hue='color',
    size=20
)

#regplot
plt.figure(figsize=(10,6))
sns.regplot(x='carat', y='price', data=diamonds, line_kws={'color': 'red'})
#sns.regplot(x='carat', y='price', data=diamonds, order=2, #scatter_kws=line_kws={'color': 'red'})
plt.tight_layout()
plt.show()

#joinplot hex/scatter
sns.jointplot(
    data=diamonds,
    x='price',
    y='carat',
    alpha=0.8,
    #kind='scatter'
    kind='hex'
)
plt.show()

#pairplot
col = ['carat', 'depth', 'table', 'price']

sns.pairplot(
    diamonds, 
    vars=col, 
    hue='color', 
    plot_kws={'s': 10, 'alpha': 0.3}
)
plt.show()

#countplot kategoricke data
order = ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal']
    #cut podla color
sns.countplot(data=diamonds, x='cut', order=order, hue='color')
plt.title('Počet diamantov podľa cut a farby (color)')
plt.show()

#barplot
sns.barplot(x='cut', y='price', data=diamonds, estimator=np.mean, hue='color', palette='pastel', ci=None)
plt.legend(bbox_to_anchor=(1.15, 1.02), loc='upper right')
plt.show()

#boxplot
plt.figure(figsize=(14,6))
sns.boxplot(
    data=diamonds,
    x='price',
    y='color',
    hue='cut',
    order=['D','E','F','G','H','I','J']
)


###
#ipy
import matplotlib.pyplot as plt
from ipywidgets import interact
import pandas as pd

df = px.data.iris()

def plot_matplotlib(species='Setosa'):
    data = df[df['species'] == species]

    plt.figure(figsize=(8, 4))
    plt.plot(data['petal_length'], data['petal_width'], marker='o', linestyle='None', color='blue')
    plt.title("Petal length vs width")
    plt.xlabel('petal_length')
    plt.ylabel('petal_width')
    plt.grid(True)
    plt.show()

interact(plot_matplotlib, species=sorted(df['species'].unique()))
###


###
import plotly.express as px
import ipywidgets as widgets
from IPython.display import display

# Načítame dataset
df = px.data.iris()

# Vytvoríme dropdown widget na výber druhu
species_dropdown = widgets.Dropdown(
    options=df['species'].unique(),
    description='Druh:',
    value='setosa'
)

# Funkcia na aktualizáciu grafu
def update_plot(species):
    filtered_df = df[df['species'] == species]
    fig = px.scatter(
        filtered_df,
        x="petal_length",
        y="petal_width",
        color="species",
        title=f"Iris - {species.capitalize()}",
        hover_data=["sepal_length", "sepal_width"]
    )
    fig.show()

# Prepojenie widgetu s funkciou pomocou interact
widgets.interact(update_plot, species=species_dropdown)


###

#jdaapp
#jdahelp
#jdahelp1
#jdahelp2
#jdahelpp
#nehehe
import requests
url = "https://raw.githubusercontent.com/Vendess/jdahelp/refs/heads/main/jdahelp.txt"
response = requests.get(url)
print(response.text)
