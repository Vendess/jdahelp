import requests

url = "https://a36e-78-98-99-76.ngrok-free.app/chat"  # ← cesta

data = {"message": "request v pythone."}

r = requests.post(url, json=data)

print(r.json()["reply"])

#merge
def merge_lists(*args):
    result = []
    for arg in args:
        if isinstance(arg, list):
            result.extend(arg)
    return result
    
#sum
def sum_numbers(numbers):
    total = 0
    for number in numbers:
        if isinstance(number, (int, float)):
            total += number
        else:
            # raise TypeError(f"Hodnota {number} nie je číslo!")
            print(f"Preskočená neplatná hodnota: {number}")
    return total
 
#pasca
def pascal_triangle(n):
    triangle = []

    for i in range(n):
        row = [1]  # každý riadok začína 1
        if triangle:
            last_row = triangle[-1]
            for j in range(1, i):
                # každý nový prvok je súčet dvoch nad sebou
                row.append(last_row[j - 1] + last_row[j])
            row.append(1)  # každý riadok končí 1
        triangle.append(row)

    return triangle
    
#fib
def fib(n):
    if n < 0:
        raise ValueError("n musi byt viac ako 0")
    if n < 2:
        return n
    return fib(n-1) + fib(n-2)
    
#reverse
def reverse_str(s):
    return s[::-1].upper()
    
#count vov
def count_vovels(s):
    count = 0
    for ch in s.lower():
        if ch in 'aeiouy':
            count += 1
    return count
    
#first 5 chosen columns
df_subset = df[['stlpec1', 'stlpec2', 'stlpec3']].head(5)

#filter
df_subset = df[df['stlpec'] > hodnota]

#drop rows with null in col
df_dropped = df.dropna(subset=['col'])

#drop dupli
df_bez_duplikatov = df.drop_duplicates(subset=['meno'])

#fill empty
df['stlpec'] = df['stlpec'].fillna(val)

#num empty
df['stlpec'].isna().sum()

#agregacia
grouped = df.groupby('target')
df.groupby('kategoria')['predaj'].agg('sum')
#to nasledne ulozime do my_stats stlpce ktore potrebujeme a spriemerujeme
my_stats = grouped[['stlpec1', 'stlpec2', 'stlpec3']].mean()
#category that has max
my_stats['color_intensity'].idxmax()
#max value
my_stats['color_intensity'].max()

#another agre
stats = df.groupby('class').agg(
    avg_mass=('mass','mean'),
    avg_age=('age_years','mean')

#number of rows
len(wine_df)

#eval
df.eval("col1 / col2 and col3 < 5")

#apply func
def categorize_acid(ratio):
    if ratio < 0.2:
        return 'low_acid'
    elif 0.2 <= ratio < 0.35:
        return 'medium_acid'
    else:
        return 'high_acid'

wine_df['acid_cat'] = wine_df['acids_ratio'].apply(categorize_acid)

#value counts
df['stlpec'].value_counts()

#pivot
pivot_nieco = df.pivot_table(
    index='index_stlpec',
    columns='columns',
    values='values',
    aggfunc=['min', 'max']
)

#piv
pd.pivot_table(data, index=["sex", "title_short"], values="age", aggfunc=["median", "mean", "min", "max", "count"], margins=True)

#imports
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

%matplotlib inline
sns.set()

#describe
df.describe()
df.describe(include='object')

#info
df.info()

#mod
temp = df['stlpec'].mode()[0]
#df_penguins_filled['sex'] = df_penguins_filled['sex'].fillna(most_common_sex)

#categorize mass func
def categorize_mass(mass):
    if pd.isna(mass):
        return np.nan
    elif mass < 4:
        return 'light'
    elif 4 <= mass < 5:
        return 'medium'
    elif mass >= 5:
        return 'heavy'

df_penguins['mass_group'] = df_penguins['body_mass_kg'].apply(categorize_mass)

#query a sort
df_penguins.query("species == 'Chinstrap'").sort_values(by="mass_group")
#quer
l = data.query("sex == 'male' and title_short == 'rare title'")["age"].hist()

#map
data["embarked"] = data["embarked"].map({"S": "Southampton", "Q": 'Queenstown', "C": "Cherbourg"})
data["embarked"].value_counts()  # zobrazíme si rôzne hodnoty po nahradení a ich početnosti

#piv
ptable = pd.pivot_table(data, index=["sex", "title_short"], values="age", aggfunc="median")
#pivot
df_penguins.pivot_table(index="mass_group", columns="species", values="bill_ratio", aggfunc="mean")
#crosstab
pd.crosstab(df_penguins['mass_group'], df_penguins['sex'])

#groupby multi
df_grouped = df.groupby(['stlpec1', 'stlpec2'])
#zobrazenie priemerne hodnoty zo stlpca1 a stlpca2 kombinacie
grouped = df_grouped[['pozadovane hodnoty podla stlpec1', 'pozadovane hodnoty podla stlpec2']].mean()

#zobrazovanie
heaviest = grouped['body_mass_g'].idxmax()
heaviest_mass = grouped['body_mass_g'].max()

#importy
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
#sns.set(style="darkgrid")
sns.set()
%matplotlib inline

#read
df = pd.read_csv("https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv")

#datetime easy
df_temps['Date'] = pd.to_datetime(df_temps['Date'])

#datetime convert hard
# convert month to str short
df['month_str'] = df['month'].str.slice(0,3)
df['date_str'] = df['year'].astype(str) + '-' + df['month_str'] + '-01'
# str format YYYY-MMM-01
df['date'] = pd.to_datetime(df['date_str'], format="%Y-%b-%d")

#choose period
#date as index
### !!! ### ### !!! ### ### !!! ### ### !!! ### ### !!! ### ### !!! ### 
df_1985 = df_ts.loc['1985']
plt.figure(figsize=(18, 6))
#plt.plot(df_1985.index, df_1985['Temp'], marker='.')
plt.plot(df_1985.index, df_1985.values, marker='.')
plt.title('Teploty za 1985')
plt.ylabel("Teploty")
plt.xlabel("Obdobie")

#klzavy priemer za poslednych 30, zobrazenie 2 grafov
df_ts['ma_30'] = df_ts['Temp'].rolling(window=30).mean()

plt.figure(figsize=(18, 6))
plt.plot(df_ts['Temp'], color="blue", label="Temp")
plt.plot(df_ts['ma_30'], color="red", label="Klzavy priemer temp")
plt.title('Moving Average vyhladzovanie')
plt.legend()
plt.show()

#exponencialne vyhladzovanie 3 graf
df_ts['ewm_alpha_0.1'] = df_ts['Temp'].ewm(alpha=0.1).mean()

plt.figure(figsize=(18, 6))
plt.plot(df_ts['Temp'], color="yellow", label="Temp")
plt.plot(df_ts['ewm_alpha_0.1'], color="red", label="EWMA (alpha=0.1)")
plt.plot(df_ts['ma_30'], color="green", label="Rolling avg")
plt.title('Exponencialne vyhladzovanie')
plt.legend()
plt.show()

#shift
df_ts['diff_1'] = df_ts['Temp'].diff(1)
df_ts['shift_1'] = df_ts['Temp'].shift(1)

#resid
resampled_resid = decomp_result.resid.resample('W').mean()  # alebo 'M' pre mesiac
resampled_resid.plot(title='Reziduá (týždenný priemer)', figsize=(10, 3))

plt.figure(figsize=(10, 3))
plt.scatter(decomp_result.resid.index, decomp_result.resid, s=2, alpha=0.5)
plt.title('Reziduá – scatter plot')

#freq daily perioda 365
ts_data = df_ts['Temp'].asfreq('D')
ts_dataI = ts_data.interpolate()
ts_dataD = ts_data = ts_data.dropna()

decomp_result = seasonal_decompose(ts_dataI, model='additive', period=365)
fig = decomp_result.plot()
fig.set_size_inches(10,6)
plt.tight_layout()
plt.show()

#resampl
df_monthly = df_ts['Temp'].resample('M').mean()
df_monthly.plot(marker='o', figsize=(12,4), title='Mesacne priemery teplot')
plt.show()

#concat join 2 df
df_all = pd.concat([df_red, df_white], ignore_index=True)

#wines read
df_red = pd.read_csv("winequality-red.csv", sep=';')
df_white = pd.read_csv("winequality-white.csv", sep=';')
df_all = pd.concat([df_red, df_white], ignore_index=True)

#func high_qual_cat
def high_qual_cat(qual):
    if pd.isna(qual):
        return np.nan
    elif qual > 7:
        return 1
    else:
        return 0

df_all['high_quality'] = df_all['quality'].apply(high_qual_cat)

#dtypes
df.dtypes
df['col'].dtype

#intervaly
df['qcut_interval'] = pd.qcut(df['stlpec'], q=5)
df_all['alcohol_bin'] = pd.cut(df_all['alcohol'], bins=5)
#cut s hranicami
data["fare_ordinal"] = pd.cut(data["fare"], bins=[0, 25, 100, 520], include_lowest=True)
data["fare_ordinal"].value_counts()

#diskretizacia
data["age_ordinal"] = pd.cut(
    data["age"],
    bins=[0, 13, 19, 65, data["age"].max()],
    include_lowest=True,
    labels=["child", "young", "adult", "old"]
)
data["age_ordinal"].value_counts()

#grp by
avg_quality_by_alcohol = df_all.groupby('alcohol_bin')['quality'].mean()

### ikd
### ikd
# do premennej age1 si uložíme iba neprázdne hodnoty age (pôvodné dáta sa nezmenia)
age1 = data["age"].dropna()  # metóda dropna vráti iba záznamy s neprázdnymi hodnotami

# definujeme si funkciu, s ktorou nahradíme chýbajúce hodnoty veku podľa pohlavia a titulu
# row bude objekt reprezentujúci jeden riadok v tabuľke
def replace_missing_age(row):
    age = row["age"]  # zistíme si vek, pohlavie a titul pasažiera
    sex = row["sex"]
    title = row["title_short"]
    # ak je vek chýbajúca hodnota, nahradíme ho mediánom v danej skupine určenej podľa pohlavia a titulu
    if pd.isna(age):
        return ptable["age"][(sex, title)]
    else:
        return age  # inak vrátime známu hodnotu

# aplikujeme funkciu replace_missing_age na každý riadok tabuľky (axis=1, prednastavená hodnota axis=0 by aplikovala funkciu po stĺpcoch)
# výsledok sú hodnoty age s nahradenými chýbajúcimi hodnotami, ktoré si uložíme do premennej age2
age2 = data.apply(replace_missing_age, axis=1)

# pre porovnanie si naraz vykreslíme histogram bez nahradenia a po nahradení chýbajúcich hodnôt
p = plt.hist([age1, age2])

#graf line
avg_quality_by_alcohol.plot(kind='line', marker='o')
plt.title('Priemerná kvalita podľa úrovní alkoholu', fontsize=16)
plt.xlabel('Intervaly alkoholu')
plt.ylabel('Priemerná kvalita')
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

#bar
df_all['pH_rounded'] = df_all['pH'].round(1)
mean_quality_by_pH = df_all.groupby('pH_rounded')['quality'].mean()
mean_quality_by_pH.plot(kind='bar', stacked=False, figsize=(12, 6), color=['green'])
plt.tight_layout()
plt.show()

#pocet
count_by_pH_high_quality = df_all.groupby(['pH_rounded', 'high_quality']).size().unstack(fill_value=0)
count_by_pH_high_quality.plot(kind='bar', stacked=True, figsize=(12, 6), color=['green', 'purple'])

#hist 2 next to
high_quality_wines = df_all[df_all['high_quality'] == 1]
low_quality_wines = df_all[df_all['high_quality'] == 0]

fig, axs = plt.subplots(1, 2, figsize=(14, 5), sharey=True)

axs[0].hist(high_quality_wines['alcohol'], bins=20, color='green', alpha=0.7)
axs[0].set_title('Distribúcia alkoholu - vysokokvalitné vína')
axs[0].set_xlabel('Alcohol')
axs[0].set_ylabel('Počet vín')

axs[1].hist(low_quality_wines['alcohol'], bins=20, color='red', alpha=0.7)
axs[1].set_title('Distribúcia alkoholu - ostatné vína')
axs[1].set_xlabel('Alcohol')

plt.tight_layout()
plt.show()

#joinplot
sns.jointplot(data=diamonds, x='price', y='carat', kind='scatter/hex', s=10, alpha=0.1)
plt.show()

#hist 2 in 1
high_quality = df_all[df_all['high_quality'] == 1]['alcohol']
low_quality = df_all[df_all['high_quality'] == 0]['alcohol']

plt.figure(figsize=(10,6))

plt.hist(low_quality, bins=30, alpha=0.5, label='Low quality', color='red', edgecolor='black')
plt.hist(high_quality, bins=30, alpha=0.5, label='High quality', color='green', edgecolor='black')

plt.xlabel('Alcohol')
plt.ylabel('Count')
plt.title('Distribution of Alcohol by Wine Quality')
plt.legend()
plt.show()

#scatter
plt.figure(figsize=(10, 6))
scatter = plt.scatter(
    df_all['volatile acidity'],
    df_all['citric acid'],
    c=df_all['alcohol'],
    alpha=0.7,
    edgecolor='k'
)
plt.colorbar(scatter, label='Alcohol')
plt.grid(True)

#pie
high_qual_counts = df_all['high_quality'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(high_qual_counts, labels=high_qual_counts.index, colors=['red', 'blue'], autopct='%1.1f%%')


###
#interakt
import pandas as pd
import matplotlib.pyplot as plt
import ipywidgets as widgets
from ipywidgets import interact, IntSlider, Dropdown
import plotly.express as px

df_red = pd.read_csv("winequality-red.csv", sep=';')
df_white = pd.read_csv("winequality-white.csv", sep=';')
wine_df = pd.concat([df_red, df_white], ignore_index=True)

#only numeric cols
numeric_cols = wine_df.select_dtypes(include='number').columns.tolist()

def interactive_histogram(variable='alcohol', bins=10):
    data = wine_df[variable]
    
    plt.figure(figsize=(8, 4))
    plt.hist(data, bins=bins, color='skyblue', edgecolor='black')
    plt.title(f'Histogram premennnej: {variable}')
    plt.xlabel(variable)
    plt.ylabel('Frekvencia')
    plt.grid(True)
    plt.show()

#widget
interact(
    interactive_histogram,
    variable=Dropdown(options=numeric_cols, value='alcohol', description='Premenná:'),
    bins=IntSlider(min=5, max=100, step=5, value=20, description='Počet binov:')
)
###


#sns load
diamonds = sns.load_dataset('diamonds')

#hist
sns.displot(
    diamonds['price'],
    kind='hist',
    bins=50,
    #bins='auto'
    kde=True,
    height=5,
    aspect=2.5,
    color='tomato'
)
plt.xticks(np.arange(0, 6, 0.5))
plt.xticks(rotation=45)
plt.show()

#scatter
plt.figure(figsize=(12, 8))
sns.scatterplot(
    data=diamonds,
    x='carat',
    y='price',
    alpha=0.5,
    hue='color',
    size=20
)

#regplot
plt.figure(figsize=(10,6))
sns.regplot(x='carat', y='price', data=diamonds, line_kws={'color': 'red'})
#sns.regplot(x='carat', y='price', data=diamonds, order=2, #scatter_kws=line_kws={'color': 'red'})
plt.tight_layout()
plt.show()

#joinplot hex/scatter
sns.jointplot(
    data=diamonds,
    x='price',
    y='carat',
    alpha=0.8,
    #kind='scatter'
    kind='hex'
)
plt.show()

#pairplot
col = ['carat', 'depth', 'table', 'price']

sns.pairplot(
    diamonds, 
    vars=col, 
    hue='color', 
    plot_kws={'s': 10, 'alpha': 0.3}
)
plt.show()

#countplot kategoricke data
order = ['Fair', 'Good', 'Very Good', 'Premium', 'Ideal']
    #cut podla color
sns.countplot(data=diamonds, x='cut', order=order, hue='color')
plt.title('Počet diamantov podľa cut a farby (color)')
plt.show()

#barplot
sns.barplot(x='cut', y='price', data=diamonds, estimator=np.mean, hue='color', palette='pastel', ci=None)
plt.legend(bbox_to_anchor=(1.15, 1.02), loc='upper right')
plt.show()

#boxplot
plt.figure(figsize=(14,6))
sns.boxplot(
    data=diamonds,
    x='price',
    y='color',
    hue='cut',
    order=['D','E','F','G','H','I','J']
)


###
#ipy
import matplotlib.pyplot as plt
from ipywidgets import interact
import pandas as pd

df = px.data.iris()

def plot_matplotlib(species='Setosa'):
    data = df[df['species'] == species]

    plt.figure(figsize=(8, 4))
    plt.plot(data['petal_length'], data['petal_width'], marker='o', linestyle='None', color='blue')
    plt.title("Petal length vs width")
    plt.xlabel('petal_length')
    plt.ylabel('petal_width')
    plt.grid(True)
    plt.show()

interact(plot_matplotlib, species=sorted(df['species'].unique()))
###


###
import plotly.express as px
import ipywidgets as widgets
from IPython.display import display

# Načítame dataset
df = px.data.iris()

# Vytvoríme dropdown widget na výber druhu
species_dropdown = widgets.Dropdown(
    options=df['species'].unique(),
    description='Druh:',
    value='setosa'
)

# Funkcia na aktualizáciu grafu
def update_plot(species):
    filtered_df = df[df['species'] == species]
    fig = px.scatter(
        filtered_df,
        x="petal_length",
        y="petal_width",
        color="species",
        title=f"Iris - {species.capitalize()}",
        hover_data=["sepal_length", "sepal_width"]
    )
    fig.show()

# Prepojenie widgetu s funkciou pomocou interact
widgets.interact(update_plot, species=species_dropdown)


###
#nehehe
import requests
# URL na ziskanie obsahu repozitara
api_url = "https://api.github.com/repos/Vendess/jdahelp/contents/"
response = requests.get(api_url)
data = response.json()
#
for item in data:
    print(f"{item['name']} ({item['type']})")
###
###
url = "https://raw.githubusercontent.com/Vendess/jdahelp/refs/heads/main/jdahelp.txt"
response = requests.get(url)
print(response.text)
###
